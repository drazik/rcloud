{# src/RCloud/Bundle/RBundle/Resources/views/Editor/showEditor.html.twig #}

{% extends 'RCloudRBundle::layout.html.twig' %}

{% block title %}Editeur{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('bundles/rclouduser/css/font-awesome.min.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('bundles/rcloudr/css/editor.css') }}">
{% endblock %}

{% block navbarItems %}
<li class="inbl">
    <button class="menu-item inbl" id="new-tab"><i class="fa fa-plus"></i> Nouvel onglet</button>
</li>
<li class="inbl">
    <button class="menu-item inbl" id="run-script"><i class="fa fa-play"></i> Exécuter</button>
</li>
<li class="inbl">
    <button class="menu-item inbl" id="save-script"><i class="fa fa-hdd-o"></i> Enregistrer</button>
</li>
<li class="inbl">
    <button class="menu-item inbl" id="show-packages"><i class="fa fa-puzzle-piece"></i> Packages</button>
</li>
<li class="inbl">
    <button class="menu-item inbl" id="print-graphes"><i class="fa fa-print"></i> Imprimer les graphiques</button>
</li>
<li class="inbl">
    <a class="menu-item inbl" href="{{ path('show_dashboard') }}"><i class="fa fa-arrow-left"></i> Revenir au dashboard</a>
</li>
{% endblock %}
{% block content %}
<div class="modal desktop-hidden" id="packages-list">
    <div class="modal-content">
        <h1>Les packages utilisables</h1>
        <ul>
            {% for package in packages %}
                <li>{{ package }}</li>
            {% endfor %}
        </ul>
        <button class="modal-close">Fermer</button>
    </div>
</div>

<section class="line">
    <div class="mod left w20" id="existing-scripts">
        <h1>Vos scripts</h1>
        <ul class="unstyled">
            {% for script in scripts %}
                <li class="existing-script" data-id="{{ script.id }}" data-name="{{ script.name }}" data-content="{{ script.content }}">{{ script.name }}</li>
            {% endfor %}
        </ul>
    </div>
    <ul class="tabs mod left w80" id="tabs"></ul>
</section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('bundles/rcloudr/js/ace/ace.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/rcloudr/js/noty/jquery.noty.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/rcloudr/js/noty/layouts/bottom.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/rcloudr/js/noty/themes/default.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/rcloudr/js/mustache/mustache.js') }}"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            function initEditors(elements) {
                for (var i = 0; i < elements.length; ++i) {
                    initEditor(elements[i]);
                }
            }

            function initEditor(element) {
                var editor = ace.edit(element);
                editor.setTheme('ace/theme/monokai');
                editor.getSession().setMode('ace/mode/r');
                editor.getSession().setUseSoftTabs(true);

                // editor.getSession().on('change', handleEditorChange);

                $(element).data('editor', editor);
            }

            var $tabTemplate = $('#tab-template').html();
            var $tabsList = $('#tabs');
            var $currentTab = $tabsList.find('li').get(0);

            // Changement d'onglet
            $tabsList.on('change','[name="tabs"]', function(event) {
                $currentTab = $(this).parent();
            });

            // Nouvel onglet
            $('#new-tab').click(function() {
                var id = Date.now();
                var newTabHTML = Mustache.render($tabTemplate, {
                    liId: 'tab' + id + '-container',
                    inputId: 'tab' + id,
                    tabName: 'Sans titre',
                    tabContentId: 'tab-content' + id,
                    saved: false
                });

                $tabsList.append(newTabHTML);
                initEditor(document.querySelector('#tab-content' + id + ' .editor'));
                $('#tab' + id).click();
            });

            // Fermeture d'un onglet
            $('#tabs').on('click', '.close-tab', function() {
                var parents = $(this).parentsUntil('#tabs', 'li');
                var $toRemove = $(parents[0]);

                if ($toRemove.attr('id') == $currentTab.attr('id')) {
                    if ($toRemove.prev().length == 0) {
                        $currentTab = $toRemove.next().length == 0 ? null : $toRemove.next();
                    } else {
                        $currentTab = $toRemove.prev();
                    }

                    $toRemove.remove();

                    if ($currentTab) {
                        $currentTab.find('input').click();
                    }

                    if ($tabsList.find('li').length == 0) {
                        $('#new-tab').click();
                    }
                } else {
                    $toRemove.remove();
                }
            });

            // Exécution d'un script
            $('#run-script').click(function(){
                var editor = $currentTab.find('.editor').data('editor');
                var $result = $($currentTab.find('.result')[0]);

                var script = editor.session.getTextRange(editor.getSelectionRange()) || editor.getValue();

                if (script) {
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('run_script_ajax') }}",
                        data: {
                            script: script
                        },
                        beforeSend: function(jqXHR, settings) {
                            $result.html('<img src="{{ asset('bundles/rcloudr/images/ajax-loader.gif') }}" alt="Loading..." title="Loading...">');
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            $result.html(textStatus);
                        },
                        success: function(data, textStatus, jqXHR) {
                            $result.html(data);
                        }
                    }); 
                }
            });

            // Sauvegarde d'un script
            $('#save-script').click(function() {
                var editor = $currentTab.find('.editor').data('editor');
                var scriptContent = editor.getValue();

                if ($currentTab.attr('data-saved')) {
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('save_existing_script_ajax') }}",
                        data: {
                            scriptId: $currentTab.attr('data-saved'),
                            scriptContent: scriptContent
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            var notification = noty({
                                text: 'Erreur lors de l\'enregistrement : ' + textStatus,
                                layout: 'bottom',
                                type: 'success',
                                closeWidth: 'button'
                            });
                        },
                        success: function(data, textStatus, jqXHR) {
                            $('.existing-script[data-id="' + $currentTab.attr('data-saved') + '"]').attr('data-content', scriptContent);
                            
                            var notification = noty({
                                text: 'Script enregistré',
                                layout: 'bottom',
                                type: 'success',
                                closeWidth: 'button'
                            });
                        }
                    });
                } else {
                    var scriptName = prompt('Donnez un nom à ce script');

                    if (scriptName) {
                        scriptName += '.R';
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('save_new_script_ajax') }}",
                            data: {
                                scriptName: scriptName,
                                scriptContent: scriptContent
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                var notification = noty({
                                    text: 'Erreur lors de l\'enregistrement : ' + textStatus,
                                    layout: 'bottom',
                                    type: 'success',
                                    closeWidth: 'button'
                                });
                            },
                            success: function(data, textStatus, jqXHR) {
                                $currentTab.find('.tab-name').html(scriptName);
                                $currentTab.attr('data-saved', data);

                                var notification = noty({
                                    text: 'Script enregistré',
                                    layout: 'bottom',
                                    type: 'success',
                                    closeWidth: 'button'
                                });

                                $('#existing-scripts ul').append('<li class="existing-script" data-id="' + data + '" data-name="' + scriptName + '" data-content="' + scriptContent + '">' + scriptName + '</li>');
                            }
                        });
                    }
                }
            });

            $('#existing-scripts').on('click', '.existing-script', function() {
                $('.existing-script').removeClass('selected');
                $(this).addClass('selected');
            });

            $('#existing-scripts').on('dblclick', '.existing-script', function() {
                $(this).removeClass('selected');
                var id = $(this).attr('data-id');
                var name = $(this).attr('data-name');
                var content = $(this).attr('data-content');

                var newTabHTML = Mustache.render($tabTemplate, {
                    liId: 'tab' + id + '-container',
                    inputId: 'tab' + id,
                    tabName: name,
                    tabContentId: 'tab-content' + id,
                    saved: id
                });

                $tabsList.append(newTabHTML);
                initEditor(document.querySelector('#tab-content' + id + ' .editor'));
                
                $('#tab' + id + '-container').find('.editor').data('editor').setValue(content);

                $('#tab' + id).click();
            });

            $('#show-packages').click(function() {
                $('#packages-list').removeClass('desktop-hidden');
            });

            $('.modal').on('click', '.modal-close', function() {
                $('#packages-list').addClass('desktop-hidden');
            });

            initEditors(document.querySelectorAll('.editor'));

            // Si aucun onglet n'est ouvert à l'arrivée sur la page, on en crée un
            if (!$currentTab) {
                $('#new-tab').click();
            }
        });
    </script>
    <script type="text/template" id="tab-template">
        {% verbatim %}
        <li id="{{liId}}" {{#saved}}data-saved="{{saved}}"{{/saved}}>
            <input class="visually-hidden" id="{{inputId}}" type="radio" name="tabs">
            <label for="{{inputId}}"><span class="tab-name">{{tabName}}</span><i class="fa fa-times-circle close-tab"></i></label>
            <div class="tab-content line" id="{{tabContentId}}">
                <div class="editor mod left w50"></div>
                <div class="result mod left w50"></div>
            </div>
        </li>
        {% endverbatim %}
    </script>
{% endblock %}